library(readr)
GermanCredit <- read_table2("http://eric.univ-lyon2.fr/~jjacques/Download/DataSet/GermanCredit.data",
col_names = FALSE)
# Conversion des données pour nous permettre de récupérer le type des variables.
data <- data.frame(GermanCredit)
# Quelques tests
test_quali_quali <- function(i,data){
# On commence par créer notre table de contingence à l'aide de la fonction test
# On effectue le test
test_khi <- chisq.test(table(as.factor(data[,21]),data[,i]))
p_value <- test_khi$p.value
return(p_value)
}
test_quali_quanti <- function(i,data){
# On a simplement à effectuer le test
test_aov <- aov(X21~data[,i], data=data)
# On extrait la p-value que l'on pourra comparer au risque d'erreur alpha
p_value <- summary(test_aov)[[1]][["Pr(>F)"]][1]
return(p_value)
}
list_corr = NULL
list_uncorr = NULL
for (i in 1:(dim(data)[2]-1)){
print(i)
# On commence par extraire la nature de variable et on regarde si elle est de type "numérique"
# ou "charactère"
nature_variable <- typeof(data[,i])
if (nature_variable == "character"){
nature_test <- "Khi_deux"
p_value <- test_quali_quali(i,data)
}
if (nature_variable == "double"){
nature_test <- "ANOVA"
p_value <- test_quali_quanti(i,data)
}
# On compare la p-value extraite au risque d'erreur de alpha = 5% pour tirer des conclusions quant
# quant à la corrélation entre X21 et la variable testée
if (p_value < 0.05) {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d est corrélée à la variable X21",  nature_test, p_value, i)))
list_corr <- c(list_corr,i)
} else {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d n'est pas corrélée à la variable X21",  nature_test, p_value, i)))
list_uncorr <- c(list_uncorr,i)
}
}
# La liste des variables corrélées à la variable est donnée par
print(paste("X",list_corr,sep=""))
# La liste des variables non corrélées à la variable est donnée par
print(paste("X",list_uncorr,sep=""))
typeof(data[,1])
typeof(data[,2])
typeof(data[,2:4])
list_corr = NULL
list_uncorr = NULL
for (i in 1:(dim(data)[2]-1)){
print(i)
# On commence par extraire la nature de variable et on regarde si elle est de type "numérique"
# ou "charactère"
nature_variable <- typeof(data[,i])
if (nature_variable == "character"){
nature_test <- "Khi_deux"
p_value <- test_quali_quali(i,data)
}
if (nature_variable == "double"){
nature_test <- "ANOVA"
p_value <- test_quali_quanti(i,data)
}
# On compare la p-value extraite au risque d'erreur de alpha = 5% pour tirer des conclusions quant
# quant à la corrélation entre X21 et la variable testée
if (p_value < 0.05) {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d est corrélée à la variable X21",  nature_test, p_value, i)))
list_corr <- c(list_corr,i)
} else {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d n'est pas corrélée à la variable X21",  nature_test, p_value, i)))
list_uncorr <- c(list_uncorr,i)
}
}
# La liste des variables corrélées à la variable est donnée par
print(paste("X",list_corr,sep=""))
# La liste des variables non corrélées à la variable est donnée par
print(paste("X",list_uncorr,sep=""))
# Conversion des données pour nous permettre de récupérer le type des variables.
data <- data.frame(GermanCredit)
# Quelques tests
test_quali_quali <- function(i,data){
# On commence par créer notre table de contingence à l'aide de la fonction test
# On effectue le test
test_khi <- chisq.test(table(as.factor(data[,21]),data[,i]))
p_value <- test_khi$p.value
return(p_value)
}
test_quali_quanti <- function(i,data){
# On a simplement à effectuer le test
#test_aov <- aov(X21~data[,i], data=data)
test_aov <- t.test(X21~data[,i], data=data)
# On extrait la p-value que l'on pourra comparer au risque d'erreur alpha
p_value <- summary(test_aov)[[1]][["Pr(>F)"]][1]
return(p_value)
}
list_corr = NULL
list_uncorr = NULL
for (i in 1:(dim(data)[2]-1)){
print(i)
# On commence par extraire la nature de variable et on regarde si elle est de type "numérique"
# ou "charactère"
nature_variable <- typeof(data[,i])
if (nature_variable == "character"){
nature_test <- "Khi_deux"
p_value <- test_quali_quali(i,data)
}
if (nature_variable == "double"){
nature_test <- "ANOVA"
p_value <- test_quali_quanti(i,data)
}
# On compare la p-value extraite au risque d'erreur de alpha = 5% pour tirer des conclusions quant
# quant à la corrélation entre X21 et la variable testée
if (p_value < 0.05) {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d est corrélée à la variable X21",  nature_test, p_value, i)))
list_corr <- c(list_corr,i)
} else {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d n'est pas corrélée à la variable X21",  nature_test, p_value, i)))
list_uncorr <- c(list_uncorr,i)
}
}
cholesterol <- read.csv2("~/Desktop/A exporter/Cours/Lyon2/Statistiques_Master/cholesterol.csv")
data=cbind(rep(cholesterol$id,2),stack(cholesterol[,2:3]),rep(cholesterol$sexe,2))
colnames(data)=c('id','chol','temps','genre')
boxplot(chol~temps,data=data)
boxplot(chol~id,data=data)
avant=cholesterol$av
après=avant-0.1
boxplot(avant,après)
t.test(avant,après)
t.test(chol~temps,data=data,paired=TRUE,alternative="greater")
boxplot(av-ap~sexe,data=cholesterol)
wilcox.test(av-ap~sexe,data=cholesterol,alternative="greater")
summary(cholesterol$sexe)
hist(cholesterol$av[cholesterol$sexe=="h"]-cholesterol$ap[cholesterol$sexe=="h"], breaks=4)
qqnorm(cholesterol$av[cholesterol$sexe=="h"]-cholesterol$ap[cholesterol$sexe=="h"])
shapiro.test(cholesterol$av[cholesterol$sexe=="h"]-cholesterol$ap[cholesterol$sexe=="h"])
hist(cholesterol$av[cholesterol$sexe=="f"]-cholesterol$ap[cholesterol$sexe=="f"])
qqnorm(cholesterol$av[cholesterol$sexe=="f"]-cholesterol$ap[cholesterol$sexe=="f"])
shapiro.test(cholesterol$av[cholesterol$sexe=="f"]-cholesterol$ap[cholesterol$sexe=="f"])
t.test(av-ap~sexe,data=cholesterol,alternative="greater")
tab=rbind(c(128213,647,359,42),c(65963,4000,2642,303))
colnames(tab)=c('aucune','minimale','legere','grave')
rownames(tab)=c('oui','non')
data=as.table(tab)
plot(data)
chisq.test(tab)
library(readr)
GermanCredit <- read_table2("http://eric.univ-lyon2.fr/~jjacques/Download/DataSet/GermanCredit.data",
col_names = FALSE)
# Conversion des données pour nous permettre de récupérer le type des variables.
data <- data.frame(GermanCredit)
# Quelques tests
test_quali_quali <- function(i,data){
# On commence par créer notre table de contingence à l'aide de la fonction test
# On effectue le test
test_khi <- chisq.test(table(as.factor(data[,21]),data[,i]))
p_value <- test_khi$p.value
return(p_value)
}
test_quali_quanti <- function(i,data){
# On a simplement à effectuer le test
#test_aov <- aov(X21~data[,i], data=data)
test_aov <- t.test(data[,i]~X21, data=data)
# On extrait la p-value que l'on pourra comparer au risque d'erreur alpha
p_value <- summary(test_aov)[[1]][["Pr(>F)"]][1]
return(p_value)
}
list_corr = NULL
list_uncorr = NULL
for (i in 1:(dim(data)[2]-1)){
print(i)
# On commence par extraire la nature de variable et on regarde si elle est de type "numérique"
# ou "charactère"
nature_variable <- typeof(data[,i])
if (nature_variable == "character"){
nature_test <- "Khi_deux"
p_value <- test_quali_quali(i,data)
}
if (nature_variable == "double"){
nature_test <- "ANOVA"
p_value <- test_quali_quanti(i,data)
}
# On compare la p-value extraite au risque d'erreur de alpha = 5% pour tirer des conclusions quant
# quant à la corrélation entre X21 et la variable testée
if (p_value < 0.05) {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d est corrélée à la variable X21",  nature_test, p_value, i)))
list_corr <- c(list_corr,i)
} else {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d n'est pas corrélée à la variable X21",  nature_test, p_value, i)))
list_uncorr <- c(list_uncorr,i)
}
}
t.test(X2~X21,data)
aov(X2~X21,data)
aov(X2~X21,data)$p.value
summary(aov(X2~X21,data))$p.value
summary(aov(X2~X21,data))
summary(aov(X2~X21,data))
t.test(X2~X21)
t.test(X2~X21,data)
t.test(X2~X21,data)
t.test(X2~X21,data)$P.value
t.test(X2~X21,data)$p.value
# Conversion des données pour nous permettre de récupérer le type des variables.
data <- data.frame(GermanCredit)
# Quelques tests
test_quali_quali <- function(i,data){
# On commence par créer notre table de contingence à l'aide de la fonction test
# On effectue le test
test_khi <- chisq.test(table(as.factor(data[,21]),data[,i]))
p_value <- test_khi$p.value
return(p_value)
}
test_quali_quanti <- function(i,data){
# On a simplement à effectuer le test
test_stud <- t.test(data[,i]~X21, data=data)
# On extrait la p-value que l'on pourra comparer au risque d'erreur alpha
p_value <- test_stud$p.value
return(p_value)
}
list_corr = NULL
list_uncorr = NULL
for (i in 1:(dim(data)[2]-1)){
print(i)
# On commence par extraire la nature de variable et on regarde si elle est de type "numérique"
# ou "charactère"
nature_variable <- typeof(data[,i])
if (nature_variable == "character"){
nature_test <- "Khi_deux"
p_value <- test_quali_quali(i,data)
}
if (nature_variable == "double"){
nature_test <- "ANOVA"
p_value <- test_quali_quanti(i,data)
}
# On compare la p-value extraite au risque d'erreur de alpha = 5% pour tirer des conclusions quant
# quant à la corrélation entre X21 et la variable testée
if (p_value < 0.05) {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d est corrélée à la variable X21",  nature_test, p_value, i)))
list_corr <- c(list_corr,i)
} else {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d n'est pas corrélée à la variable X21",  nature_test, p_value, i)))
list_uncorr <- c(list_uncorr,i)
}
}
# La liste des variables corrélées à la variable est donnée par
print(paste("X",list_corr,sep=""))
# La liste des variables non corrélées à la variable est donnée par
print(paste("X",list_uncorr,sep=""))
list_corr = NULL
list_uncorr = NULL
for (i in 1:(dim(data)[2]-1)){
print(i)
# On commence par extraire la nature de variable et on regarde si elle est de type "numérique"
# ou "charactère"
nature_variable <- typeof(data[,i])
if (nature_variable == "character"){
nature_test <- "Khi_deux"
p_value <- test_quali_quali(i,data)
}
if (nature_variable == "double"){
nature_test <- "Student"
p_value <- test_quali_quanti(i,data)
}
# On compare la p-value extraite au risque d'erreur de alpha = 5% pour tirer des conclusions quant
# quant à la corrélation entre X21 et la variable testée
if (p_value < 0.05) {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d est corrélée à la variable X21",  nature_test, p_value, i)))
list_corr <- c(list_corr,i)
} else {
print(paste(sprintf("Nous avons effectué un test du %s. Ce test nous a conduit à une p_value égale à %e ce qui nous montre que la variable X%d n'est pas corrélée à la variable X21",  nature_test, p_value, i)))
list_uncorr <- c(list_uncorr,i)
}
}
# La liste des variables corrélées à la variable est donnée par
print(paste("X",list_corr,sep=""))
# La liste des variables non corrélées à la variable est donnée par
print(paste("X",list_uncorr,sep=""))
data$x21
data$X21
res_aov <- summary(aov(X2~X21,data))
res_aov
res_aov[[1]]
res_aov[[1]][["Pr(>F)"]]
# Paramètres de l'échantillon
n = 100
mu = 20
ect = sqrt(10)
norm_sample <- rnorm(n, mu, ect)
# Histogramme
hist(norm_sample, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.13), xlim =c(min(norm_sample), max(norm_sample)))
lines(density(norm_sample), col = "red", lwd = 3)
# Vous pouvez jouer sur le paramètres "breaks" pour faire varier le nombre
# de barres dans votre histogramme
# On peut également comparer cela à la densité théorique de la loi normale
x=seq(min(norm_sample)-1,max(norm_sample)+1,0.1)
lines(x,dnorm(x,mu,ect), col= "black", lwd = 2)
legend(max(norm_sample)-5, 0.13, legend = c("density_emp", "density_th"), col = c("red","black"), lwd = 2)
# Fonction de repartition empirique
plot(ecdf(norm_sample), col = "red", lwd =2)
x=seq(min(norm_sample)-1,max(norm_sample)+1,0.1)
lines(x,pnorm(x,mu,ect), col= "black", lwd = 2)
legend(max(norm_sample)-6,0.5, legend = c("pdf_emp", "pdf_th"), col = c("red","black"), lwd = 2)
?chisq.test
47*150
3*3*90+6*60
48*60
810 + 900
2880-1710
# Simualtion d'échantillons suivants une loi exponentielles
moyenne = 20
lambda = 1/moyenne
exp_sample_10 <- rexp(10, lambda)
exp_sample_100 <- rexp(100, lambda)
exp_sample_1000 <- rexp(1000, lambda)
# Tests de normalité
shapiro.test(exp_sample_10)
shapiro.test(exp_sample_100)
shapiro.test(exp_sample_1000)
boxcox(exp_sample_10)
library(MASS)
boxcox(exp_sample_10)
boxcox(exp_sample_100)
exp_sample_100
?boxcox
boxcox(exp_sample_100~1, lambda=seq(0,2,0.1), plotit = TRUE)
res <- boxcox(exp_sample_100~1, lambda=seq(0,2,0.1), plotit = TRUE)
res
which.max(res$y)
res$x[which.max(res$y)]
hist(exp_sample_100)
# Histogramme
hist(exp_sample_1000, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.13), xlim =c(0, max(exp_sample_1000)))
lines(density(exp_sample_1000), col = "red", lwd = 3)
# Histogramme
hist(exp_sample_1000, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.13), xlim =c(0, max(exp_sample_1000)))
lines(density(exp_sample_1000), col = "red", lwd = 3)
x=seq(0,max(exp_sample_1000)+1,0.1)
lines(x,dexp(x,lambda), col= "black", lwd = 2)
legend(max(exp_sample_1000)-5, 0.13, legend = c("density_emp", "density_th"),
col = c("red","black"), lwd = 2)
# Histogramme
hist(exp_sample_1000, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.13), xlim =c(0, max(exp_sample_1000)))
lines(density(exp_sample_1000), col = "red", lwd = 3)
x=seq(0,max(exp_sample_1000)+1,0.1)
lines(x,dexp(x,lambda), col= "black", lwd = 2)
legend(max(exp_sample_1000)-20, 0.13, legend = c("density_emp", "density_th"),
col = c("red","black"), lwd = 2)
# Histogramme
hist(exp_sample_1000, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.13), xlim =c(0, max(exp_sample_1000)))
lines(density(exp_sample_1000), col = "red", lwd = 3)
x=seq(0,max(exp_sample_1000)+1,0.1)
lines(x,dexp(x,lambda), col= "black", lwd = 2)
legend(max(exp_sample_1000)-60, 0.13, legend = c("density_emp", "density_th"),
col = c("red","black"), lwd = 2)
# Histogramme
hist(exp_sample_1000, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.08), xlim =c(0, max(exp_sample_1000)))
lines(density(exp_sample_1000), col = "red", lwd = 3)
x=seq(0,max(exp_sample_1000)+1,0.1)
lines(x,dexp(x,lambda), col= "black", lwd = 2)
legend(max(exp_sample_1000)-60, 0.08, legend = c("density_emp", "density_th"),
col = c("red","black"), lwd = 2)
boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
res_box <- boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
gamma_opt <- res_box[which.max(res_box$y)]
gamma_opt
boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
res_box <- boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
gamma_opt <- res_box[which.max(res_box$y)]
res_box
which.max(res_box)
which.max(res_box$y)
res_box <- boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
gamma_opt <- res_box$x[which.max(res_box$y)]
gamma_opt
exp_boxcox <- (exp_sample_1000^(gamma_opt)-1)/gamma_opt
exp_boxcox <- (exp_sample_1000^(gamma_opt)-1)/gamma_opt
hist(exp_boxcox, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.08), xlim =c(0, max(exp_sample_1000)))
lines(density(exp_boxcox), col = "red", lwd = 3)
# Calcul du gamma optimal
res_box <- boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
gamma_opt <- res_box$x[which.max(res_box$y)]
# Transformation des données et représentation des données
exp_boxcox <- (exp_sample_1000^(gamma_opt)-1)/gamma_opt
hist(exp_boxcox, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.08), xlim =c(0, max(exp_sample_1000)))
lines(density(exp_boxcox), col = "red", lwd = 3)
# On peut ensuite tester la normalité
# Calcul du gamma optimal
res_box <- boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
gamma_opt <- res_box$x[which.max(res_box$y)]
# Transformation des données et représentation des données
exp_boxcox <- (exp_sample_1000^(gamma_opt)-1)/gamma_opt
hist(exp_boxcox, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.08), xlim =c(min(exp_boxcox)-1, max(exp_boxcox)+1))
lines(density(exp_boxcox), col = "red", lwd = 3)
# On peut ensuite tester la normalité
# Calcul du gamma optimal
res_box <- boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
gamma_opt <- res_box$x[which.max(res_box$y)]
# Transformation des données et représentation des données
exp_boxcox <- (exp_sample_1000^(gamma_opt)-1)/gamma_opt
hist(exp_boxcox, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.15), xlim =c(min(exp_boxcox)-1, max(exp_boxcox)+1))
lines(density(exp_boxcox), col = "red", lwd = 3)
# On peut ensuite tester la normalité
# Calcul du gamma optimal
res_box <- boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
gamma_opt <- res_box$x[which.max(res_box$y)]
# Transformation des données et représentation des données
exp_boxcox <- (exp_sample_1000^(gamma_opt)-1)/gamma_opt
hist(exp_boxcox, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.20), xlim =c(min(exp_boxcox)-1, max(exp_boxcox)+1))
lines(density(exp_boxcox), col = "red", lwd = 3)
# On peut ensuite tester la normalité
# Calcul du gamma optimal
res_box <- boxcox(exp_sample_1000~1, lambda = seq(0,4,0.01))
gamma_opt <- res_box$x[which.max(res_box$y)]
# Transformation des données et représentation des données
exp_boxcox <- (exp_sample_1000^(gamma_opt)-1)/gamma_opt
hist(exp_boxcox, breaks=10, prob = TRUE,
col = "#456ABF", border= "black", ylim = c(0,0.20), xlim =c(min(exp_boxcox)-1, max(exp_boxcox)+1))
lines(density(exp_boxcox), col = "red", lwd = 3)
# On peut ensuite tester la normalité
shapiro.test(exp_boxcox)
visa = read.table("VisaPremier.txt", header=TRUE, na.strings = ".")
log(e)
log(40)
?microbenchmark
install.packages('caret')
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
